"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.functionValidator = exports.validator = void 0;
var https = require("https");
/**
 * Validates that the Token is valid
 *
 * @param token        the token to validate
 * @param accountSid   the accountSid
 * @param authToken    the authToken
 */
var validator = function (token, accountSid, authToken) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) {
                if (!token) {
                    reject('Unauthorized: Token was not provided');
                    return;
                }
                if (!accountSid || !authToken) {
                    reject('Unauthorized: AccountSid or AuthToken was not provided');
                    return;
                }
                var authorization = Buffer.from(accountSid + ":" + authToken);
                var requestData = JSON.stringify({ token: token });
                var requestOption = {
                    hostname: 'iam.twilio.com',
                    port: 443,
                    path: "/v1/Accounts/" + accountSid + "/Tokens/validate",
                    method: 'POST',
                    headers: {
                        Authorization: "Basic " + authorization.toString('base64'),
                        'Cache-Control': 'no-cache',
                        'Content-Type': 'application/json',
                        'Content-Length': requestData.length,
                    },
                };
                var req = https.request(requestOption, function (resp) {
                    var data = '';
                    resp.setEncoding('utf8');
                    resp.on('data', function (d) { return (data += d); });
                    resp.on('end', function () {
                        try {
                            var result = JSON.parse(data);
                            if (result.valid) {
                                resolve(result);
                            }
                            else {
                                reject(result.message);
                            }
                        }
                        catch (err) {
                            reject(err.message);
                        }
                    });
                });
                req.on('error', function (err) { return reject(err.message); });
                req.write(requestData);
                req.end();
            })];
    });
}); };
exports.validator = validator;
/**
 * A validator to be used with Twilio Function. It uses the {@link validator} to validate the token
 *
 * @param handlerFn    the Twilio Runtime Handler Function
 */
var functionValidator = function (handlerFn) {
    return function (context, event, callback) {
        var failedResponse = function (message) {
            var response = new Twilio.Response();
            response.appendHeader('Access-Control-Allow-Origin', '*');
            response.appendHeader('Access-Control-Allow-Methods', 'OPTIONS, POST, GET');
            response.appendHeader('Access-Control-Allow-Headers', 'Content-Type');
            response.appendHeader('Content-Type', 'plain/text');
            response.setStatusCode(403);
            response.setBody(message);
            callback(null, response);
        };
        var accountSid = context.ACCOUNT_SID;
        var authToken = context.AUTH_TOKEN;
        var token = event.Token;
        if (!accountSid || !authToken) {
            return failedResponse('Unauthorized: AccountSid or AuthToken was not provided. For more information, please visit https://twilio.com/console/runtime/functions/configure');
        }
        return exports.validator(token, accountSid, authToken)
            .then(function (result) {
            event.TokenResult = result;
            return handlerFn(context, event, callback);
        })
            .catch(failedResponse);
    };
};
exports.functionValidator = functionValidator;
//# sourceMappingURL=index.js.map